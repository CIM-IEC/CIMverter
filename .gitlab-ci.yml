variables:
  DOCKER_TAG_DEV: ${CI_COMMIT_REF_NAME}
  DOCKER_IMAGE_DEV: cimverter-dev
  DOCKER_TAG_OMC: ${CI_COMMIT_REF_NAME}
  DOCKER_IMAGE_OMC: omc-dev-rse

stages:
  - prepare
  - test
  - modelica

# build the docker img in which we want to test. normally we want a dockerfile with all dependencies which we just include
docker-cimverter:
  stage: prepare
  script:
    - docker build -t ${DOCKER_IMAGE_DEV}:${DOCKER_TAG_DEV} -f ./Docker/Dockerfile.cimverter .
    - docker images
  only: 
    - rse
    - release
    - master
  tags:
    - shell

docker-omc:
  stage: prepare
  script:
    - docker build -t ${DOCKER_IMAGE_OMC}:${DOCKER_TAG_OMC} -f ./Docker/Dockerfile.omc .
    - docker images
  tags:
    - shell

# clone libcimpp in our projekt. compile and run the tests.
test: 
  stage: test
  image: ${DOCKER_IMAGE_DEV}:${DOCKER_TAG_DEV}
  tags:
    - docker

  before_script:
    - apt-get update -qq && apt-get install -y -qq git 
    - git --version
    - rm -rf libcimpp/
    - git clone --recursive https://${GITLAB_USERLIBCIMPP}:${GITLAB_TOKENLIBCIMPP}@git.rwth-aachen.de/acs/core/cim/cimpp/libcimpp.git/ libcimpp/
    - mkdir -p build && cd build
    - cmake .. -DUSE_CIM_VERSION:STRING=IEC61970_17v23_IEC61968_13v11
    - make -j8

  script:
    - cd ../test/
    - ./testFiles.py
  only:
    - master 
    - release
    - rse

checkmodel:
  stage: modelica
  image: ${DOCKER_IMAGE_OMC}:${DOCKER_TAG_OMC}
  dependencies:
    - test
  script:
    - pwd
    - cp test/outputs/*.mo .
    - ls -l
    - omc /test/scripts/test_modell.mos
  only:
    -rse
